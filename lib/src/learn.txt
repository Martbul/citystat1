A Future<T> in Dart represents a computation or operation that will complete sometime in the future and produce a value of type T (or an error).

async - it’s Dart’s way to handle asynchronous programming — waiting for things like network requests, file I/O, or timers without blocking the main thread.

final is a keyword to declare a variable whose value can be set only once.
Unlike const, final variables are initialized at runtime (when the code executes) rather than compile time.

singleton - In Dart, a Singleton is a design pattern that ensures a class has only one instance throughout the entire app, 
and provides a global point of access to that instance.

static means the method or variable belongs to the class itself, not to any specific instance of that class.

In Dart, get defines a getter — a method that behaves like a property.EXAMPLE:int get age => 2025 - birthYear;print(person.age); // instead of person.age()

@override tells Dart you're overriding the abstract getter.

=> FirebaseMessaging.instance is a shorthand way to return the singleton instance of the FirebaseMessaging class (from the Firebase plugin).

A variable that starts with _ is private to its file or class

ConsumerState<Application> createState() => _AppState(); This means: “I want the Application widget to be paired with _AppState, which is a ConsumerState<Application>.”

=> _AppState(); is a sugar syntaqx for:       {
                                      return _AppState();
                                            }



In Riverpod, ref is a handle that gives you access to the dependency injection system. It's short for "reference", and it allows you to:
    Access (read) a provider’s value
    Listen to updates from a provider (watch)
    Trigger side effects or lifecycle logic (listenManual, onDispose, etc.)


ref.read(notificationServiceProvider) - “Give me the current instance of the NotificationService from the provider called notificationServiceProvider
